{"version":3,"sources":["components/Character/index.js","components/Score/index.js","App.js","index.js"],"names":["Character","props","react_default","a","createElement","className","shuffleArray","characters","map","item","alt","name","src","image","onClick","event","guessCharacter","id","data-guessed","guessed","Score","score","currentScore","highScore","App","state","_this","i","character","console","log","setState","array","length","j","Math","floor","random","temp","components_Score","components_Character","this","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"suDAeeA,MAZf,SAAmBC,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVJ,EAAMK,aAAaL,EAAMM,YAAYC,IAAI,SAAAC,GAAI,OAC1CP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeK,IAAKD,EAAKE,KAAMC,IAAKH,EAAKI,MAAOC,QAAS,SAACC,GAAD,OAAWd,EAAMe,eAAeP,EAAKQ,GAAIF,IAAQG,eAAcT,EAAKU,qBCIjJC,MATf,SAAenB,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACbH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMoB,MAAMC,cACxBpB,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMoB,MAAME,aCuG1BC,6MAlGbC,MAAQ,CACNlB,aACAc,WAGFL,eAAiB,SAACC,GAQhB,IAAIV,EAAamB,EAAKD,MAAMlB,WAE5B,IAAK,IAAIoB,KAAKpB,EAAY,CACxB,IAAMqB,EAAYrB,EAAWoB,GAC7BE,QAAQC,IAAIF,GAERA,EAAUX,KAAOA,KAGO,IAAtBW,EAAUT,SAEZE,EAAMC,aAAe,EACrBD,EAAME,UAAYG,EAAKD,MAAMJ,MAAME,UACnChB,EAAaA,EAAWC,IAAI,SAAAoB,GAK1B,OAJAA,EAAUT,SAAU,EACpBS,EAAUX,GAAKW,EAAUX,GACzBW,EAAUjB,KAAOiB,EAAUjB,KAC3BiB,EAAUf,MAAQe,EAAUf,MACrBe,MAQTA,EAAUT,SAAU,EACpBE,EAAMC,aAAeI,EAAKD,MAAMJ,MAAMC,aAAe,EAIjDD,EAAMC,aAAeI,EAAKD,MAAMJ,MAAME,UAExCF,EAAME,UAAYF,EAAMC,aAGxBD,EAAME,UAAYG,EAAKD,MAAMJ,MAAME,WAKvCG,EAAKK,SAAS,CAAEV,UAChBK,EAAKK,SAAS,CAAExB,8FAKTyB,GACX,IAAK,IAAIL,EAAIK,EAAMC,OAAS,EAAGN,EAAI,EAAGA,IAAK,CACzC,IAAIO,EAAIC,KAAKC,MAAMD,KAAKE,UAAYV,EAAI,IACpCW,EAAON,EAAML,GACjBK,EAAML,GAAKK,EAAME,GACjBF,EAAME,GAAKI,EAEb,OAAON,mCAMP,OADAH,QAAQC,IAAIvB,GAEVL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,8FAIJF,EAAAC,EAAAC,cAACmC,EAAD,CACElB,MAAOA,IAGTnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoC,EAAD,CACEjC,WAAYA,EACZS,eAAgByB,KAAKzB,eACrBV,aAAcmC,KAAKnC,wBA9FboC,aCFlBC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.5e4b69dd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Character(props) {\n    return (\n        <div className='container'>\n            {props.shuffleArray(props.characters).map(item => (\n                <div className=\"card\">\n                    <img className='card-img-top' alt={item.name} src={item.image} onClick={(event) => props.guessCharacter(item.id, event)} data-guessed={item.guessed} />\n                </div>\n            ))}\n        </div>\n    );\n}\n\nexport default Character;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n    return (\n        <div className = 'container'>\n            <h2>Score: {props.score.currentScore}</h2>\n            <h2>High Score: {props.score.highScore}</h2>\n        </div>\n    );\n}\n\nexport default Score;\n","import React, { Component } from 'react';\nimport characters from './characters.json';\nimport score from './score.json';\nimport Character from './components/Character'\nimport Score from './components/Score'\n\n\n\nclass App extends Component {\n\n\n  // Setting this.state.friends to the friends json array\n  state = {\n    characters,\n    score\n  };\n\n  guessCharacter = (id) => {\n\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    // console.log('before')\n    // console.log(this.state.characters)\n    // console.log(id)\n    // console.log('now change....')\n    // console.log(this.state.characters)\n    let characters = this.state.characters;\n\n    for (let i in characters) {\n      const character = characters[i]\n      console.log(character)\n\n      if (character.id === id) {\n        // console.log('found id')\n\n        if (character.guessed === true) {\n          // console.log('already guessed!')\n          score.currentScore = 0;\n          score.highScore = this.state.score.highScore;\n          characters = characters.map(character => {\n            character.guessed = false\n            character.id = character.id\n            character.name = character.name\n            character.image = character.image\n            return character\n          })\n\n          // console.log('after')\n          // console.log(characters)\n\n        } else {\n          // console.log('not guessed yet!')\n          character.guessed = true;\n          score.currentScore = this.state.score.currentScore + 1\n          // console.log(score.currentScore)\n\n          // console.log('high score:  ' + this.state.score.highScore)\n          if (score.currentScore > this.state.score.highScore) {\n            // console.log('updating high score')\n            score.highScore = score.currentScore\n\n          } else {\n            score.highScore = this.state.score.highScore\n          }\n\n        }\n        // console.log(score)\n        this.setState({ score });\n        this.setState({ characters })\n      }\n    }\n  };\n\n  shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array\n  }\n\n  render() {\n    // console.log(score)\n    console.log(characters)\n    return (\n      <div className='Container'>\n        <div className=\"App jumbotron\">\n          <header className=\"App-header\">\n            <h1>Overwatch Clicky Game</h1>\n            <h3>Click characters to grow your score, but don't click the same character twice!</h3>\n          </header>\n        </div>\n\n        <Score\n          score={score}\n        />\n\n        <div className='row'>\n          <Character\n            characters={characters}\n            guessCharacter={this.guessCharacter}\n            shuffleArray={this.shuffleArray}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}